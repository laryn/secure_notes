<?php

/**
 * @file
 * TODO
 */

/**
 * Implements hook_menu().
 */
function secure_notes_menu() {
  $items = array();
  $items['admin/config/content/secure-notes'] = array(
    'title' => 'Secure Notes Settings',
    'description' => 'Administer Secure Notes Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_admin_settings_form'),
    'access arguments' => array('manage secure notes settings'),
    'file' => 'secure_notes.admin.inc',
  );
  $items['secure-notes/add/%'] = array(
    'title' => 'Create Secure Note',
    'description' => 'Create a secure note',
    'page callback' => 'secure_notes_render_add_form',
    'page arguments' => array(2),
    'access callback' => 'secure_notes_add_token_valid',
    'access arguments' => array(2),
    'file' => 'secure_notes.pages.inc',
  );
  $items['secure-notes/view/%'] = array(
    'title' => 'View Secure Note',
    'description' => 'View a secure note',
    'page callback' => 'secure_notes_render_node_view',
    'page arguments' => array(2),
    'access callback' => 'secure_notes_view_token_valid',
    'access arguments' => array(2),
    'file' => 'secure_notes.pages.inc',
  );
  $items['admin/content/secure-notes/invite/add'] = array(
    'title' => t('Generate Secure Note Add Link'),
    'description' => t('Generate a one time use link for the creation of a note.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_add_link_invite'),
    'access arguments' => array('secure notes invite add'),
    'file' => 'secure_notes.pages.inc',
  );
  /*
  $items['admin/content/secure-notes/email'] = array(
    'title' => t('Send Secure Note Email'),
    'description' => t('Generate a one time use link for the creation of a note.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_generate_link'),
    'access arguments' => array('generate secure notes links'),
    'file' => 'secure_notes.pages.inc',
  );
  */
  return $items;
}

/**
 * Implements hook_permission().
 */
function secure_notes_permission() {
  return array(
    'secure notes invite add' => array(
      'description' => t('Create link invitations to allow the creation of new secure notes.'),
      'title' => t('Generate secure note add invitations'),
      'restrict access' => TRUE,
    ),
    'secure notes invite view' => array(
      'description' => t('Create link invitations to allow the viewing of secure notes.'),
      'title' => t('Generate secure note view invitations'),
      'restrict access' => TRUE,
    ),
    'view secure notes' => array(
      'title' => t('View secure notes'),
      'description' => t('Secure notes need to be private to be secure. Allows access to secure note content.'),
      'restrict access' => TRUE,
    ),
  );
}

/*
 * Implementation of hook_help()
 */
function secure_notes_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#secure-notes':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Secure notes module was designed to solve the problem of transfering sensitive data between people. While there are many good solutons for this (PGP, SSH, TrueCrypt, etc) it is often the case that one or more of the parties are non-technical or unable to install new software. In this case, it is possible to allow transfer of this data by storing it in Drupal.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('Secure notes allows any content type to be made into a secure drop point. To authorize a user to create a secure not, generate a token and email it to them. This is very similar to the way users can reset a password. The one time link will allow them to create a node even though they do not have access to the site in any other way.') . '</p>';
      $output .= '<p>' . t('If you need to send a secure not to someone, generate a similar one-time use access link and they can then view a specified piece of content, once and only once.') . '</p>';
  }
  return $output;
}

/**
 * TODO
 */
function secure_notes_add_token_valid($token) {
  $result = db_select('secure_notes_create', 'snc')
    ->fields('snc', array('expires', 'type'))
    ->condition('token', $token, '=')
    ->execute()
    ->fetchObject();
  return ($result && (int) $result->expires > REQUEST_TIME && secure_notes_type_allowed($result->type));
}

/**
 * TODO
 */
function secure_notes_view_token_valid($token) {
  $result = db_select('secure_notes_view', 'snv')
    ->fields('snv', array('expires'))
    ->condition('token', $token, '=')
    ->execute()
    ->fetchObject();
  return $result && (int) $result->expires > REQUEST_TIME;
}

/**
 * TODO
 */
function secure_notes_type_allowed($type) {
  $default = in_array('secure_note', array_keys(node_type_get_names())) ? array('secure_note' => 'secure_note') : array();
  $allowed = variable_get('secure_notes_allowed_types', $default);
  return in_array($type, $allowed);
}
