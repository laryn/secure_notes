<?php

/**
 * @file
 * TODO
 */

/**
 * Implements hook_menu().
 */
function secure_notes_menu() {
  $items = array();
  $items['admin/config/content/secure-notes'] = array(
    'title' => 'Secure Notes Settings',
    'description' => 'Administer Secure Notes Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_admin_settings_form'),
    'access arguments' => array('manage secure notes settings'),
    'file' => 'secure_notes.admin.inc',
  );
  $items['secure-notes/add/%'] = array(
    'title' => 'Create Secure Note',
    'description' => 'Create a secure note',
    'type' => MENU_CALLBACK,
    'page callback' => 'secure_notes_render_add_form',
    'page arguments' => array(2),
    'access callback' => 'secure_notes_add_token_valid',
    'access arguments' => array(2),
    'file' => 'secure_notes.pages.inc',
  );
  $items['secure-notes/view/%'] = array(
    'title' => 'View Secure Note',
    'description' => 'View a secure note',
    'type' => MENU_CALLBACK,
    'page callback' => 'secure_notes_render_node_view',
    'page arguments' => array(2),
    'access callback' => 'secure_notes_view_token_valid',
    'access arguments' => array(2),
    'file' => 'secure_notes.pages.inc',
  );
  $items['admin/content/secure-notes/invite/add'] = array(
    'title' => t('Generate Secure Note Add Link'),
    'description' => t('Generate a one time use link for the creation of a note.'),
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_add_link_invite'),
    'access arguments' => array('secure notes invite add'),
    'file' => 'secure_notes.pages.inc',
  );
  $items['node/%/secure-notes/invite'] = array(
    'title' => t('Secure Note Invitation'),
    'type' => MENU_LOCAL_TASK,
    'description' => t('Generate a one time use link that can be used to view this node.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_view_link_invite'),
    'access callback' => 'secure_notes_node_invite_access',
    'access arguments' => array(1, 'secure notes invite view'),
    'file' => 'secure_notes.pages.inc',
  );
  $items['node/%/secure-notes/review'] = array(
    'title' => t('Review Secure Note Invitations'),
    'type' => MENU_LOCAL_TASK,
    'description' => t('Review secure note invitations for this node.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_review', 1),
    'access callback' => 'secure_notes_review_access',
    'access arguments' => array('view'),
    'file' => 'secure_notes.pages.inc',
  );
  $items['admin/content/secure-notes'] = array(
    'title' => t('Secure Notes'),
    'description' => t('Review secure note invitations.'),
    'page callback' => 'secure_notes_manage',
    'access callback' => 'secure_notes_review_access',
    'access arguments' => array('any'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/content/secure-notes/review/add'] = array(
    'title' => t('Review Secure Note Creation Invitations'),
    'description' => t('Review secure note creation invitations.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_review', 'add'),
    'access callback' => 'secure_notes_review_access',
    'access arguments' => array('add'),
    'file' => 'secure_notes.pages.inc',
  );
  $items['admin/content/secure-notes/review/view'] = array(
    'title' => t('Review Secure Note View Invitations'),
    'description' => t('Review secure note creation invitations.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_review', 'view'),
    'access callback' => 'secure_notes_review_access',
    'access arguments' => array('view'),
    'file' => 'secure_notes.pages.inc',
  );
  $items['secure-notes/%/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_delete_confirm', 1, 2),
    'access callback' => 'secure_notes_review_access',
    'access arguments' => array(NULL, 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'secure_notes.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function secure_notes_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'admin/content' page.
  if ($root_path == 'admin/content') {
    $item = menu_get_item('admin/content/secure-notes');
    if ($item['access']) {
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function secure_notes_permission() {
  return array(
    'secure notes invite add' => array(
      'description' => t('Create link invitations to allow the creation of new secure notes.'),
      'title' => t('Generate secure note add invitations'),
      'restrict access' => TRUE,
    ),
    'secure notes invite view' => array(
      'description' => t('Create link invitations to allow the viewing of secure notes.'),
      'title' => t('Generate secure note view invitations'),
      'restrict access' => TRUE,
    ),
    'secure notes node view' => array(
      'title' => t('View secure notes'),
      'description' => t('Secure notes need to be private to be secure. Allows access to secure note content.'),
      'restrict access' => TRUE,
    ),
    'secure notes node edit' => array(
      'title' => t('Edit secure notes'),
      'description' => t('Secure notes need to be private to be secure. Allows edit and delete access on secure note content.'),
      'restrict access' => TRUE,
    ),
    'secure notes manage view invitations' => array(
      'title' => t('Manage secure note view invitations'),
      'description' => t('Allows the managment of invitations to view secure notes including the ability to revoke/delete invitations.'),
      'restrict access' => TRUE,
    ),
    'secure notes manage add invitations' => array(
      'title' => t('Manage secure note create invitations'),
      'description' => t('Allows the managment of invitations to create secure notes including the ability to revoke/delete invitations.'),
      'restrict access' => TRUE,
    ),
    'secure notes manage all' => array(
      'title' => t('Manage all secure note invitations'),
      'description' => t('Allows the managment of all secure note invitations.'),
      'restrict access' => TRUE,
    ),
  );
}

/*
 * Implementation of hook_help()
 */
function secure_notes_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#secure-notes':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Secure notes module was designed to solve the problem of transfering sensitive data between people. While there are many good solutons for this (PGP, SSH, TrueCrypt, etc) it is often the case that one or more of the parties are non-technical or unable to install new software. In this case, it is possible to allow transfer of this data by storing it in Drupal.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('Secure notes allows any content type to be made into a secure drop point. To authorize a user to create a secure not, generate a token and email it to them. This is very similar to the way users can reset a password. The one time link will allow them to create a node even though they do not have access to the site in any other way.') . '</p>';
      $output .= '<p>' . t('If you need to send a secure not to someone, generate a similar one-time use access link and they can then view a specified piece of content, once and only once.') . '</p>';
  }
  return $output;
}

/**
 * TODO
 */
function secure_notes_add_token_valid($token) {
  $result = db_select('secure_notes_create', 'snc')
    ->fields('snc', array('expires', 'type'))
    ->condition('token', $token, '=')
    ->execute()
    ->fetchObject();
  $access = ($result && (int) $result->expires > REQUEST_TIME && secure_notes_type_enabled($result->type));
  if (!$access) {
    drupal_set_message(t('The token you supplied is either invalid, has expired, or already been used. Please check that the url matches the one that was given to you.'), 'error');
  }
  return $access;
}

/**
 * TODO
 */
function secure_notes_view_token_valid($token) {
  $result = db_select('secure_notes_view', 'snv')
    ->fields('snv', array('expires'))
    ->condition('token', $token, '=')
    ->execute()
    ->fetchObject();
  $access = $result && (int) $result->expires > REQUEST_TIME;
  if (!$access) {
    drupal_set_message(t('The token you supplied is either invalid, has expired, or already been used. Please check that the url matches the one that was given to you.'), 'error');
  }
  return $access;
}

/**
 *TODO
 */
function secure_notes_node_invite_access($nid, $perm) {
  global $user;
  // Only provide a link if the user has access and the node is a secure note
  // type.
  if (user_access($perm, $user)) {
    $node = node_load($nid);
    if (secure_notes_type_enabled($node->type)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback to determine if a user should be allowed to view secure notes
 * invitation management pages.
 */
function secure_notes_review_access($invitation_type = NULL, $abrv = NULL) {
  global $user;
  $access = FALSE;
  if ($abrv == 'a') {
    $invitation_type = 'add';
  }
  else if ($abrv == 'v') {
    $invitation_type = 'view';
  }

  if (user_access('secure notes manage all', $user)) {
    $access = TRUE;
  }
  else {
    if ($invitation_type == 'add' && user_access('secure notes manage add invitations', $user)) {
      $access = TRUE;
    }
    if ($invitation_type == 'view' &&  user_access('secure notes manage view invitations', $user)) {
      $access = TRUE;
    }
    if ($invitation_type == 'any' &&  (user_access('secure notes manage view invitations', $user) || user_access('secure notes manage add invitations', $user))) {
      $access = TRUE;
    }
  }

  return $access;
}

/**
 * Helper function to determine if a given node type is a secure note.
 *
 * @param string $type - The node type in question.
 *
 * @return boolean
 *   Returns TRUE if secure notes are enabled on the type in question.
 *   Otherwise FALSE.
 */
function secure_notes_type_enabled($type) {
  $allowed = secure_notes_get_types();
  return in_array($type, $allowed, TRUE);
}

/**
 * Helper function used to get a list of node types that support secure notes.
 *
 * @return an associative array that denotes the secure note node types.
 *   The array lists all the node types as keys with a zero for the value if the
 *   node is not a secure note and the name of the node type if the type is a
 *   note. As a result it is important to use strict checking with using
 *   in_array for testing.
 *   Example
 *     'page' => 0,
 *     'article' => 'article'
 */
function secure_notes_get_types() {
  $default = in_array('secure_note', array_keys(node_type_get_names()), TRUE) ? array('secure_note' => 'secure_note') : array();
  return variable_get('secure_notes_types', $default);
}

/**
 * Implements hook_exit().
 */
function secure_notes_exit() {
  if (arg(0) == 'secure-notes' && arg(1) == 'view' && (arg(2))) {
    // Clean up view tokens on exit. It would be nice to do this on viewing but
    // the menu system continues to check after the node is loaded which
    // generating messages that are misleading.
    $token = arg(2);
    db_delete('secure_notes_view')
      ->condition('token', $token, '=')
      ->execute();
  }
}

/**
 * Implements hook_node_access().
 */
function secure_notes_node_access($node, $op, $account) {
  $access = NODE_ACCESS_IGNORE;
  $types = secure_notes_get_types();
  if (is_string($node)) {
    $access = NODE_ACCESS_IGNORE;
  }
  else if (!in_array($node->type, $types, TRUE)) {
    // If it is not a secure note type then ignore it.
    $access = NODE_ACCESS_IGNORE;
  }
  else if (!empty($node->note_pickup)) {
    $access = NODE_ACCESS_ALLOW;
  }
  return $access;
}

/**
 * Implements hook_node_grants().
 */
function secure_notes_node_grants($account, $op) {
  $grants = array();
  // If the user is allowed to view or edit notes then supply the appropriate grants.
  if ($op == 'view' && user_access('secure notes node view', $account)) {
    $grants['secure_notes_view'] = array(1);
  }

  if (($op == 'update' || $op == 'delete') && user_access('secure notes node edit', $account)) {
    $grants['secure_notes_edit'] = array(2);
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function secure_notes_node_access_records($node) {
  // We only care about the node if it is a secure note. If not, it is
  // treated just like any other node and we completely ignore it.
  $types = secure_notes_get_types();
  // Deny normal access to secure notes.
  if (in_array($node->type, $types, TRUE)) {
    $grants = array();
    $grants[] = array(
      'realm' => 'secure_notes_view',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    $grants[] = array(
      'realm' => 'secure_notes_edit',
      'gid' => 2,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    );
    return $grants;
  }
  // Return nothing if the node is not marked as a secure note type.
}
