<?php

/**
 * @file
 * TODO
 */

/**
 * Implements hook_menu().
 */
function secure_notes_menu() {
  $items = array();
  $items['admin/config/content/secure-notes'] = array(
    'title' => 'Secure Notes Settings',
    'description' => 'Administer Secure Notes Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_admin_settings_form'),
    'access arguments' => array('manage secure notes settings'),
    'file' => 'secure_notes.admin.inc',
  );
  $items['secure-notes/add/%'] = array(
    'title' => 'Create Secure Note',
    'description' => 'Create a secure note',
    'page callback' => 'secure_notes_render_add_form',
    'page arguments' => array(2),
    'access callback' => 'secure_notes_add_token_valid',
    'access arguments' => array(2),
    #'file' => 'secure_notes.pages.inc',
  );
  $items['secure-notes/view/%'] = array(
    'title' => 'View Secure Note',
    'description' => 'View a secure note',
    'page callback' => 'secure_notes_render_node_view',
    'page arguments' => array(2),
    'access callback' => 'secure_notes_view_token_valid',
    'access arguments' => array(2),
    #'file' => 'secure_notes.pages.inc',
  );
  $items['admin/content/secure-notes/invite/add'] = array(
    'title' => t('Generate Secure Note Add Link'),
    'description' => t('Generate a one time use link for the creation of a note.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_invite_add_link'),
    'access arguments' => array('secure notes invite add'),
    #'file' => 'secure_notes.pages.inc',
  );
  /*
  $items['admin/content/secure-notes/email'] = array(
    'title' => t('Send Secure Note Email'),
    'description' => t('Generate a one time use link for the creation of a note.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_notes_generate_link'),
    'access arguments' => array('generate secure notes links'),
    'file' => 'secure_notes.pages.inc',
  );
  */
  return $items;
}

/**
 * Implements hook_permission().
 */
function secure_notes_permission() {
  return array(
    'secure notes invite add' => array(
      'description' => t('Create link invitations to allow the creation of new secure notes.'),
      'title' => t('Generate secure note add invitations'),
      'restrict access' => TRUE,
    ),
    'secure notes invite view' => array(
      'description' => t('Create link invitations to allow the viewing of secure notes.'),
      'title' => t('Generate secure note view invitations'),
      'restrict access' => TRUE,
    ),
    'view secure notes' => array(
      'title' => t('View secure notes'),
      'description' => t('Secure notes need to be private to be secure. Allows access to secure note content.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * TODO
 */
function secure_notes_invite_add_link($form, &$form_state) {
  $token = isset($form_state['token']) ? 'Secure Note Link: ' . $form_state['token'] : '';
  $options = secure_notes_get_allowed_types();
  $types = node_type_get_names();
  foreach ($options as $key => $value) {
    $options[$key] = $types[$key];
  }

  $form = array();

  $form['types'] = array(
    '#title' => t('Node Type'),
    '#description' => t('What type of node is the user being invited to create?'),
    '#type' => 'select',
    '#options' => $options,
  );

  $form['email'] = array(
    '#title' => t('Email'),
    '#description' => t('The email address of the person that will create the note.'),
    '#type' => 'textfield',
  );

  $form['token'] = array(
    '#type' => 'markup',
    '#markup' => $token,
    '#prefix' => '<div id="token"><h2>',
    '#suffix' => '</h2></div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Generate Link',
    '#ajax' => array(
      'callback' => 'secure_notes_ajax_add_token_submit',
      'wrapper' => 'token',
    ),
    '#submit' => array('secure_notes_add_token_submit'),
  );

  return $form;
}

/**
 * TODO
 */
function secure_notes_add_token_submit($form, &$form_state) {
  // TODO FIX ME
  $token = 'AAABBBCCCDDD';
  //Make it nice and readable
  $form_state['token'] = $token;
  $form_state['rebuild'] = TRUE;
  drupal_set_message(t('A secure note creation token has been generated and stored. It will expire in TK hours.'));
}

/**
 * Submit handler for token creation.
 */
function secure_notes_ajax_add_token_submit($form, &$form_state) {
  $element = $form['token'];
  $element['#markup'] = 'Token: ' . $form_state['token'];
  return $element;
}

/**
 * TODO
 */
function secure_notes_add_token_valid($token) {
  $result = db_select('secure_notes_create', 'snc')
    ->fields('snc', array('expires', 'type'))
    ->condition('token', $token, '=')
    ->execute()
    ->fetchObject();
  return $result && (int) $result->expires > REQUEST_TIME && secure_notes_type_allowed($result->type);
}

/**
 * TODO
 */
function secure_notes_view_token_valid($token) {
  $result = db_select('secure_notes_view', 'snv')
    ->fields('snv', array('expires'))
    ->condition('token', $token, '=')
    ->execute()
    ->fetchObject();
  return $result && (int) $result->expires > REQUEST_TIME;
  return TRUE;
  return FALSE;
}

/**
 * TODO
 */
function secure_notes_get_allowed_types() {
  $default = in_array('secure_note', array_keys(node_type_get_names())) ? array('secure_note' => 'secure_note') : array();
  return variable_get('secure_notes_allowed_types', $default);
}

/**
 * TODO
 */
function secure_notes_type_allowed($type) {
  $default = in_array('secure_note', array_keys(node_type_get_names())) ? array('secure_note' => 'secure_note') : array();
  $allowed = variable_get('secure_notes_allowed_types', $default);
  return in_array($type, $allowed);
}

/**
 * TODO
 */
function secure_notes_render_add_form($token) {
  $type = db_select('secure_notes_create', 'snc')
    ->fields('snc', array('type'))
    ->condition('token', $token, '=')
    ->execute()
    ->fetchField();
  if (!$type) {
    drupal_access_denied();
  }
  module_load_include('inc', 'node', 'node.pages');
  $form = node_add($type);
  $output = drupal_render($form);
  return $output;
}
function secure_notes_render_node_view($token) {
  $nid = db_select('secure_notes_view', 'snv')
    ->fields('snv', array('nid'))
    ->condition('token', $token, '=')
    ->execute()
    ->fetchField();
  db_delete('secure_notes_view')
    ->condition('token', $token, '=')
    ->execute();
  $output = node_view(node_load($nid));
  return $output;

}

function secure_notes_node_form_submit($form, &$form_state) {
  // TODO make this a real redirect.
  $form_state['redirect'] = 'node/14';
}

function secure_notes_form_node_form_alter(&$form, &$form_state) {
  $menu = menu_get_item();
  if ($menu['path'] == 'secure-notes/add/%') {
    $form['actions']['submit']['#submit'][] = 'secure_notes_node_form_submit';
  }
}

/*
 * Implementation of hook_help()
 */
function secure_notes_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#secure-notes':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Secure notes module was designed to solve the problem of transfering sensitive data between people. While there are many good solutons for this (PGP, SSH, TrueCrypt, etc) it is often the case that one or more of the parties are non-technical or unable to install new software. In this case, it is possible to allow transfer of this data by storing it in Drupal.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('Secure notes allows any content type to be made into a secure drop point. To authorize a user to create a secure not, generate a token and email it to them. This is very similar to the way users can reset a password. The one time link will allow them to create a node even though they do not have access to the site in any other way.') . '</p>';
      $output .= '<p>' . t('If you need to send a secure not to someone, generate a similar one-time use access link and they can then view a specified piece of content, once and only once.') . '</p>';
  }
  return $output;
}
